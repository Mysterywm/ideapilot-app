/// <reference types="qs" />
import { Base, ClerkBackendAPI, JWTPayload, Session } from '@clerk/backend-core';
import type { NextFunction, Request, Response } from 'express';
import { OptionsOfUnknownResponseBody } from 'got';
import { JwksClient } from 'jwks-rsa';
export declare type MiddlewareOptions = {
    onError?: Function;
    authorizedParties?: string[];
};
/** @deprecated DEPRECATED Use WithAuthProp Est. 2.10.0 */
export declare type WithSessionProp<T> = T & {
    session?: Session;
};
/** @deprecated DEPRECATED Use RequireAuthProp Est. 2.10.0 */
export declare type RequireSessionProp<T> = T & {
    session: Session;
};
/** @deprecated DEPRECATED Use WithAuthProp Est. 2.10.0 */
export declare type WithSessionClaimsProp<T> = T & {
    sessionClaims?: JWTPayload;
};
/** @deprecated DEPRECATED Use RequireAuthProp Est. 2.10.0 */
export declare type RequireSessionClaimsProp<T> = T & {
    sessionClaims: JWTPayload;
};
export declare type WithAuthProp<T> = T & {
    session?: Session;
    sessionClaims?: JWTPayload;
};
export declare type RequireAuthProp<T> = T & {
    session: Session;
    sessionClaims: JWTPayload;
};
export default class Clerk extends ClerkBackendAPI {
    base: Base;
    httpOptions: OptionsOfUnknownResponseBody;
    _jwksClient: JwksClient;
    static _instance: Clerk;
    constructor({ apiKey, serverApiUrl, apiVersion, httpOptions, jwksCacheMaxAge, }?: {
        apiKey?: string;
        serverApiUrl?: string;
        apiVersion?: string;
        httpOptions?: OptionsOfUnknownResponseBody;
        jwksCacheMaxAge?: number;
    });
    verifyToken(token: string, authorizedParties?: string[]): Promise<JWTPayload>;
    static getInstance(): Clerk;
    defaultOnError(error: Error & {
        data: any;
    }): void;
    strictOnError(error: Error & {
        data: any;
    }): Error & {
        data: any;
    };
    expressWithSession({ onError, authorizedParties }?: MiddlewareOptions): (req: Request, res: Response, next: NextFunction) => Promise<void>;
    expressRequireSession({ onError, authorizedParties }?: MiddlewareOptions): (req: Request<import("express-serve-static-core").ParamsDictionary, any, any, import("qs").ParsedQs, Record<string, any>>, res: Response<any, Record<string, any>>, next: NextFunction) => Promise<void>;
    private _runMiddleware;
    withSession(handler: Function, { onError, authorizedParties }?: MiddlewareOptions): (req: WithSessionProp<Request> | WithSessionClaimsProp<Request>, res: Response, next?: NextFunction | undefined) => Promise<any>;
    requireSession(handler: Function, { onError, authorizedParties }?: MiddlewareOptions): (req: WithSessionProp<Request<import("express-serve-static-core").ParamsDictionary, any, any, import("qs").ParsedQs, Record<string, any>>> | WithSessionClaimsProp<Request<import("express-serve-static-core").ParamsDictionary, any, any, import("qs").ParsedQs, Record<string, any>>>, res: Response<any, Record<string, any>>, next?: NextFunction | undefined) => Promise<any>;
}
//# sourceMappingURL=Clerk.d.ts.map