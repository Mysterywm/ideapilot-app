import * as _prequist_lanyard from '@prequist/lanyard';
import { API, Types } from '@prequist/lanyard';
export { Types } from '@prequist/lanyard';

type Options = {
    /**
     * The Base URL of Lanyard's API. Defaults to `https://api.lanyard.rest`
     */
    api: {
        hostname: string;
        secure?: boolean;
    };
    /**
     * Initial data to use. Useful if server side rendering.
     */
    initialData?: _prequist_lanyard.Types.Presence;
};
declare const DEFAULT_OPTIONS: Options;

declare class LanyardError extends Error {
    readonly request: Request;
    readonly response: Response;
    readonly body: API.ErroredAPIResponse;
    readonly code: number;
    constructor(request: Request, response: Response, body: API.ErroredAPIResponse);
}
interface GetOptions extends Options {
    controller?: AbortController;
}
declare function getURL(snowflake: Types.Snowflake, options?: Options): `https://${string}/v1/users/${bigint}` | `http://${string}/v1/users/${bigint}`;
/**
 * Make a request to get the presence data for a user
 *
 * @param snowflake The snowflake to fetch presence for
 * @param options Options for the request. Same options structure as the useLanyard and useLanyardWS hooks
 * @returns A Result-like type with either the presence data, or a LanyardError instance
 */
declare function get(snowflake: Types.Snowflake, options?: GetOptions): Promise<{
    success: false;
    error: LanyardError;
    data?: never;
} | {
    success: true;
    data: Types.Presence;
    error?: never;
}>;

type State = {
    state: 'initial';
    isLoading: boolean;
    error: undefined;
    /**
     * Data could exist *even* in the `initial` state
     * if {@link Options.initialData} is passed during SSR
     */
    data: Types.Presence | undefined;
} | {
    state: 'loaded';
    isLoading: boolean;
    data: Types.Presence;
    error: LanyardError | undefined;
} | {
    state: 'errored';
    isLoading: boolean;
    data: Types.Presence | undefined;
    error: LanyardError | undefined;
};

type UseLanyardReturn = State & {
    revalidate(): Promise<void>;
};
declare function useLanyard(snowflake: Types.Snowflake, userOptions?: Partial<Options>): UseLanyardReturn;

declare enum SocketOpcode {
    Event = 0,
    Hello = 1,
    Initialize = 2,
    Heartbeat = 3
}
declare enum SocketEvents {
    INIT_STATE = "INIT_STATE",
    PRESENCE_UPDATE = "PRESENCE_UPDATE"
}
interface SocketData extends Types.Presence {
    heartbeat_interval?: number;
}
interface SocketMessage {
    op: SocketOpcode;
    t?: SocketEvents;
    d?: SocketData;
}
declare function useLanyardWS(snowflake: Types.Snowflake, options: Partial<Options> & {
    initialData: NonNullable<Options['initialData']>;
}): Types.Presence;
declare function useLanyardWS(snowflake: Types.Snowflake, options?: Partial<Options>): Types.Presence | undefined;

export { DEFAULT_OPTIONS, type GetOptions, LanyardError, type Options, type SocketData, SocketEvents, type SocketMessage, SocketOpcode, type UseLanyardReturn, get, getURL, useLanyard, useLanyardWS };
